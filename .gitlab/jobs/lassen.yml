##############################################################################
# Copyright (c) 2022-23, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the COPYRIGHT file for details.
#
# SPDX-License-Identifier: (MIT)
##############################################################################

stages:
  - is-machine-up
  - status-initiate
  - jobs-stage-1
  - jobs-stage-2
  - jobs-stage-3
  - status-update

##############################################################################
# UTILITIES
.on_lassen:
  tags:
    - shell
    - lassen
  rules:
    # Runs except if we explicitly deactivate lassen by variable.
    - if: '$ON_LASSEN == "OFF"'
      when: never
    # Advanced jobs can only run on master, develop or if ALL_TARGETS is ON.
    # Set ADVANCED_JOB to ON in the job definition to make it an advanced job.
    - if: '$ADVANCED_JOB == "ON" && $CI_COMMIT_BRANCH != "main" && $CI_COMMIT_BRANCH != "develop" && $ALL_TARGETS != "ON"'
      when: never
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.status_report: &status_report
    - export context="lassen"
    - |
      curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

.lassen_reproducer_init:
  script:
    - |
      echo -e "\e[7;32m### CI job ${CI_JOB_ID} reproducer on lassen (${SYS_TYPE}) \e[0m"
      if [[ -n "${LLNL_SERVICE_USER}" ]]; then echo -e "xsu ${LLNL_SERVICE_USER}"; fi
      echo -e "
      working_dir=\"/usr/workspace/\${USER}/${GITHUB_PROJECT_NAME}/${CI_JOB_ID}-\$(date +%s)\" \n
      mkdir -p \${working_dir} && cd \${working_dir} \n
      git clone https://github.com/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}.git --single-branch --depth=1 \n
      cd ${GITHUB_PROJECT_NAME} \n
      git fetch origin --depth=1 ${CI_COMMIT_SHA} \n
      git checkout ${CI_COMMIT_SHA} \n
      git submodule update --init --recursive \n"

# We require project to define their job command using a variable (JOB_CMD).
# In customization/gitlab-ci.yml, we encourage to define this variable as
# non-expandable, so that project can use nested variables to configure the job
# command. The caveat is that the reproducer here cannot capture the
# definition of these variables in a generic fashion. By overriding the
# following section, projects can specify the variables to define in the
# reproducer to exactly reproduce the CI build.
.lassen_reproducer_vars:
  script:
    - |
      echo -e "# Define project specific variables here if any."
      #echo -e "export <CUSTOM_VAR>=\"${<CUSTOM_VAR>}\""

.lassen_reproducer_job:
  script:
    - |
      echo -e "lalloc ${LASSEN_JOB_ALLOC} ${JOB_CMD}"
      echo -e "\e[7;32m### End of reproducer\e[0m"

.lassen_job_command:
  script:
    - lalloc ${LASSEN_JOB_ALLOC} ${JOB_CMD}

.job_on_lassen:
  extends: [.custom_job, .on_lassen]
  stage: jobs-stage-1
  script:
    # Print a reproducer
    - !reference [.lassen_reproducer_init, script]
    - !reference [.lassen_reproducer_vars, script]
    - !reference [.lassen_reproducer_job, script]
    # The actual launch command
    - !reference [.lassen_job_command, script]

##############################################################################
# JOBS

status_pending:
  extends: [.on_lassen]
  variables:
    GIT_STRATEGY: none
  stage: status-initiate
  script:
    - export pipeline_status="pending"
    - *status_report

status_success:
  extends: [.on_lassen]
  variables:
    GIT_STRATEGY: none
  stage: status-update
  script:
    - export pipeline_status="success"
    - *status_report
  when: on_success

status_failure:
  extends: [.on_lassen]
  variables:
    GIT_STRATEGY: none
  stage: status-update
  script:
    - export pipeline_status="failure"
    - *status_report
  when: on_failure

lassen_cuda_no_tpls:
  parallel:
    matrix:
      - COMPILER_SPEC: [xl@16.1.1.14]
        CUDA_SPEC: [cuda@10.1.243]
  variables:
      SPEC: "%${COMPILER_SPEC} cstd=99 cxxstd=14 precision=double ~int64 +mpi+openmp+cuda~raja~magma~superlu-dist~petsc~hypre~ginkgo cuda_arch=70 ^${CUDA_SPEC}+allow-unsupported-compilers"
  extends: [.job_on_lassen]

lassen_gcc_cuda_tpls:
  parallel:
    matrix:
      - COMPILER_SPEC: gcc@8.3.1
        CUDA_SPEC: [cuda@11.8.0]
  variables:
      SPEC: "%${COMPILER_SPEC} cstd=99 cxxstd=14 precision=double ~int64 +mpi+openmp+cuda+raja+magma+superlu-dist+petsc+hypre+ginkgo cuda_arch=70 ^ginkgo+cuda cuda_arch=70 ^hypre~cuda ^petsc~cuda ^superlu-dist+cuda cuda_arch=70 ^magma+cuda cuda_arch=70 ^raja+cuda~openmp~examples~exercises cuda_arch=70 ^${CUDA_SPEC}+allow-unsupported-compilers"
  extends: [.job_on_lassen]

# # Benchmark job
# lassen_gcc_cuda_bench:
#   parallel:
#     matrix:
#       - COMPILER_SPEC: gcc@8.3.1
#         CUDA_SPEC: [cuda@11.8.0]
#         CALIPER_DIR: /usr/workspace/sundials/califiles
#   variables:
#     SPEC: "%${COMPILER_SPEC} cstd=99 cxxstd=14 build_type=Release precision=double scheduler=lsf caliper-dir=${CALIPER_DIR} ~int64 +benchmarks+profiling+caliper+adiak+mpi+openmp+cuda+raja cuda_arch=70 ^raja+cuda~openmp~examples~exercises cuda_arch=70 ^caliper+adiak+cuda cuda_arch=70 ^${CUDA_SPEC}+allow-unsupported-compilers"
#   extends: [.on_lassen, .build_and_bench]

